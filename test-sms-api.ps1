# Script PowerShell pour tester les endpoints SMS/OTP Twilio
# Utilisation: .\test-sms-api.ps1

param(
    [string]$BaseUrl = "http://localhost:3000",
    [string]$PhoneNumber = "+33123456789"
)

# Couleurs pour l'affichage
function Write-Success { 
    param([string]$Message)
    Write-Host $Message -ForegroundColor Green 
}

function Write-Error { 
    param([string]$Message)
    Write-Host $Message -ForegroundColor Red 
}

function Write-Info { 
    param([string]$Message)
    Write-Host $Message -ForegroundColor Cyan 
}

function Write-Warning { 
    param([string]$Message)
    Write-Host $Message -ForegroundColor Yellow 
}

Write-Info "üöÄ Test des endpoints SMS/OTP Twilio"
Write-Info "URL de base: $BaseUrl"
Write-Info "Num√©ro de test: $PhoneNumber"
Write-Host ""

# Test 1: Inscription chauffeur via SMS
Write-Info "üì± Test 1: Inscription chauffeur via SMS"
$chauffeurData = @{
    nom = "TestChauffeur"
    prenom = "SMS"
    telephone = $PhoneNumber
    statut = "SALARIE"
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$BaseUrl/chauffeurs/register-sms" -Method POST -Body $chauffeurData -ContentType "application/json"
    Write-Success "‚úÖ Inscription r√©ussie: $($response | ConvertTo-Json -Depth 2)"
} catch {
    Write-Warning "‚ö†Ô∏è Chauffeur peut d√©j√† exister: $($_.Exception.Message)"
}

Write-Host ""

# Test 2: Demande d'OTP pour chauffeur
Write-Info "üì≤ Test 2: Demande d'OTP pour chauffeur"
$otpRequest = @{
    telephone = $PhoneNumber
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$BaseUrl/chauffeurs/send-otp" -Method POST -Body $otpRequest -ContentType "application/json"
    Write-Success "‚úÖ OTP envoy√©: $($response.message)"
    
    # Demander √† l'utilisateur de saisir l'OTP re√ßu
    Write-Warning "üì® V√©rifiez votre t√©l√©phone pour le code OTP"
    $otpCode = Read-Host "Entrez le code OTP re√ßu"
    
    if ($otpCode) {
        # Test 3: V√©rification OTP et connexion
        Write-Info "üîê Test 3: V√©rification OTP et connexion"
        $verifyData = @{
            telephone = $PhoneNumber
            otp = $otpCode
        } | ConvertTo-Json
        
        try {
            $loginResponse = Invoke-RestMethod -Uri "$BaseUrl/chauffeurs/verify-otp" -Method POST -Body $verifyData -ContentType "application/json"
            Write-Success "‚úÖ Connexion r√©ussie!"
            Write-Success "Token: $($loginResponse.token.Substring(0, 20))..."
            Write-Success "Chauffeur: $($loginResponse.chauffeur.nom) $($loginResponse.chauffeur.prenom)"
            
            $token = $loginResponse.token
            
            # Test 4: Envoi SMS personnalis√© (n√©cessite authentification)
            Write-Info "üí¨ Test 4: Envoi SMS personnalis√©"
            $customSmsData = @{
                to = @($PhoneNumber)
                message = "Test SMS personnalis√© depuis l'API MADAMOVE - $(Get-Date -Format 'HH:mm:ss')"
            } | ConvertTo-Json
            
            $headers = @{
                'Authorization' = "Bearer $token"
                'Content-Type' = 'application/json'
            }
            
            try {
                $smsResponse = Invoke-RestMethod -Uri "$BaseUrl/chauffeurs/send-custom-sms" -Method POST -Body $customSmsData -Headers $headers
                Write-Success "‚úÖ SMS personnalis√© envoy√©: $($smsResponse.success)"
                $smsResponse.results | ForEach-Object {
                    if ($_.success) {
                        Write-Success "  üì± SMS envoy√© √† $($_.to) - SID: $($_.sid)"
                    } else {
                        Write-Error "  ‚ùå √âchec pour $($_.to): $($_.error)"
                    }
                }
            } catch {
                Write-Error "‚ùå Erreur envoi SMS personnalis√©: $($_.Exception.Message)"
            }
            
        } catch {
            Write-Error "‚ùå Erreur v√©rification OTP: $($_.Exception.Message)"
        }
    }
    
} catch {
    Write-Error "‚ùå Erreur demande OTP: $($_.Exception.Message)"
}

Write-Host ""

# Test 5: Inscription client via SMS
Write-Info "üë§ Test 5: Inscription client via SMS"
$clientData = @{
    nom = "TestClient"
    prenom = "SMS"
    telephone = $PhoneNumber
    email = "test.client@example.com"
    ville = "Paris"
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "$BaseUrl/clients/register-sms" -Method POST -Body $clientData -ContentType "application/json"
    Write-Success "‚úÖ Inscription client r√©ussie: $($response | ConvertTo-Json -Depth 2)"
} catch {
    Write-Warning "‚ö†Ô∏è Client peut d√©j√† exister: $($_.Exception.Message)"
}

Write-Host ""

# Test 6: Test du module SMS g√©n√©rique
Write-Info "üîß Test 6: Module SMS g√©n√©rique"
Write-Warning "Note: Les tests suivants n√©cessitent une authentification admin"

Write-Host ""
Write-Info "üìã R√©sum√© des endpoints test√©s:"
Write-Host "  ‚úì POST /chauffeurs/register-sms" -ForegroundColor Green
Write-Host "  ‚úì POST /chauffeurs/send-otp" -ForegroundColor Green
Write-Host "  ‚úì POST /chauffeurs/verify-otp" -ForegroundColor Green
Write-Host "  ‚úì POST /chauffeurs/send-custom-sms" -ForegroundColor Green
Write-Host "  ‚úì POST /clients/register-sms" -ForegroundColor Green

Write-Host ""
Write-Info "üéØ Pour tester d'autres endpoints:"
Write-Host "  ‚Ä¢ POST /clients/send-otp"
Write-Host "  ‚Ä¢ POST /clients/verify-otp"
Write-Host "  ‚Ä¢ POST /clients/login-sms"
Write-Host "  ‚Ä¢ POST /sms/send (n√©cessite auth)"
Write-Host "  ‚Ä¢ POST /sms/send-otp (n√©cessite auth)"

Write-Host ""
Write-Success "‚ú® Tests termin√©s!"

import { ChauffeursService } from "./chauffeurs.service";
import { CreateChauffeurDto, LoginDriverDto, RegisterChauffeurBySmsDto, SendOtpChauffeurDto, VerifyOtpChauffeurDto, LoginChauffeurBySmsDto, SendCustomSmsDto } from "./dto/create-chauffeur.dto";
import { UpdateChauffeurDto } from "./dto/update-chauffeur.dto";
import { RechargerCreditDto } from "./dto/recharger-credit.dto";
import { CreateDocumentDto } from "./dto/create-document.dto";
import { Response } from "express";
import { ForgotPasswordDto, ResetPasswordDto } from "./dto/reset-password.dto";
export declare class ChauffeursController {
    private readonly chauffeursService;
    constructor(chauffeursService: ChauffeursService);
    create(createChauffeurDto: CreateChauffeurDto): Promise<{
        vehicule: {
            type: import(".prisma/client").$Enums.TypeVehicule;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            statut: import(".prisma/client").$Enums.StatutVehicule;
            immatriculation: string;
            marque: string;
            modele: string;
            categorie: import(".prisma/client").$Enums.CategoryVehicule;
            tarifHoraire: number | null;
            tarifJournalier: number | null;
            maxPower: number | null;
            fuelConsumption: number | null;
            maxSpeed: number | null;
            acceleration: number | null;
            capacity: number | null;
            color: string | null;
            fuelType: import(".prisma/client").$Enums.FuelType | null;
            gearType: import(".prisma/client").$Enums.GearType | null;
            dateAcquisition: Date;
            kilometrage: number;
            photos: string[];
            dateControleTechnique: Date;
        };
        credits: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            solde: number;
            chauffeurId: number;
        };
        email: string;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutChauffeur;
        statutActivite: import(".prisma/client").$Enums.StatutActivite;
        vehiculeId: number | null;
        photoUrl: string | null;
        dateInscription: Date;
        evaluation: number;
        nbCourses: number;
        resetCode: string | null;
        resetCodeExpiry: Date | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
    }>;
    loginDriver(loginDto: LoginDriverDto): Promise<{
        token: string;
        chauffeur: {
            email: string;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
    }>;
    registerBySms(registerDto: RegisterChauffeurBySmsDto): Promise<{
        vehicule: {
            type: import(".prisma/client").$Enums.TypeVehicule;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            statut: import(".prisma/client").$Enums.StatutVehicule;
            immatriculation: string;
            marque: string;
            modele: string;
            categorie: import(".prisma/client").$Enums.CategoryVehicule;
            tarifHoraire: number | null;
            tarifJournalier: number | null;
            maxPower: number | null;
            fuelConsumption: number | null;
            maxSpeed: number | null;
            acceleration: number | null;
            capacity: number | null;
            color: string | null;
            fuelType: import(".prisma/client").$Enums.FuelType | null;
            gearType: import(".prisma/client").$Enums.GearType | null;
            dateAcquisition: Date;
            kilometrage: number;
            photos: string[];
            dateControleTechnique: Date;
        };
        credits: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            solde: number;
            chauffeurId: number;
        };
    } & {
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutChauffeur;
        statutActivite: import(".prisma/client").$Enums.StatutActivite;
        vehiculeId: number | null;
        photoUrl: string | null;
        dateInscription: Date;
        evaluation: number;
        nbCourses: number;
        resetCode: string | null;
        resetCodeExpiry: Date | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
    }>;
    sendOtp(sendOtpDto: SendOtpChauffeurDto): Promise<{
        message: string;
        telephone: string;
    }>;
    verifyOtp(verifyOtpDto: VerifyOtpChauffeurDto): Promise<{
        token: string;
        chauffeur: {
            vehicule: {
                type: import(".prisma/client").$Enums.TypeVehicule;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                statut: import(".prisma/client").$Enums.StatutVehicule;
                immatriculation: string;
                marque: string;
                modele: string;
                categorie: import(".prisma/client").$Enums.CategoryVehicule;
                tarifHoraire: number | null;
                tarifJournalier: number | null;
                maxPower: number | null;
                fuelConsumption: number | null;
                maxSpeed: number | null;
                acceleration: number | null;
                capacity: number | null;
                color: string | null;
                fuelType: import(".prisma/client").$Enums.FuelType | null;
                gearType: import(".prisma/client").$Enums.GearType | null;
                dateAcquisition: Date;
                kilometrage: number;
                photos: string[];
                dateControleTechnique: Date;
            };
            credits: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                solde: number;
                chauffeurId: number;
            };
            email: string;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
    }>;
    loginBySms(loginSmsDto: LoginChauffeurBySmsDto): Promise<{
        token: string;
        chauffeur: {
            vehicule: {
                type: import(".prisma/client").$Enums.TypeVehicule;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                statut: import(".prisma/client").$Enums.StatutVehicule;
                immatriculation: string;
                marque: string;
                modele: string;
                categorie: import(".prisma/client").$Enums.CategoryVehicule;
                tarifHoraire: number | null;
                tarifJournalier: number | null;
                maxPower: number | null;
                fuelConsumption: number | null;
                maxSpeed: number | null;
                acceleration: number | null;
                capacity: number | null;
                color: string | null;
                fuelType: import(".prisma/client").$Enums.FuelType | null;
                gearType: import(".prisma/client").$Enums.GearType | null;
                dateAcquisition: Date;
                kilometrage: number;
                photos: string[];
                dateControleTechnique: Date;
            };
            credits: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                solde: number;
                chauffeurId: number;
            };
            email: string;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
    }>;
    resendOtp(sendOtpDto: SendOtpChauffeurDto): Promise<{
        message: string;
        telephone: string;
    }>;
    sendCustomSms(sendSmsDto: SendCustomSmsDto): Promise<{
        success: boolean;
        results: any[];
    }>;
    findAvailable(skip?: string, take?: string): Promise<{
        data: {
            email: string;
            nom: string;
            prenom: string;
            id: number;
            telephone: string;
            photoUrl: string;
            evaluation: number;
        }[];
        count: number;
    }>;
    findAll(skip?: string, take?: string, statut?: string, statutActivite?: string, search?: string): Promise<({
        vehicule: {
            type: import(".prisma/client").$Enums.TypeVehicule;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            statut: import(".prisma/client").$Enums.StatutVehicule;
            immatriculation: string;
            marque: string;
            modele: string;
            categorie: import(".prisma/client").$Enums.CategoryVehicule;
            tarifHoraire: number | null;
            tarifJournalier: number | null;
            maxPower: number | null;
            fuelConsumption: number | null;
            maxSpeed: number | null;
            acceleration: number | null;
            capacity: number | null;
            color: string | null;
            fuelType: import(".prisma/client").$Enums.FuelType | null;
            gearType: import(".prisma/client").$Enums.GearType | null;
            dateAcquisition: Date;
            kilometrage: number;
            photos: string[];
            dateControleTechnique: Date;
        };
        credits: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            solde: number;
            chauffeurId: number;
        };
    } & {
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutChauffeur;
        statutActivite: import(".prisma/client").$Enums.StatutActivite;
        vehiculeId: number | null;
        photoUrl: string | null;
        dateInscription: Date;
        evaluation: number;
        nbCourses: number;
        resetCode: string | null;
        resetCodeExpiry: Date | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
    })[]>;
    findOne(id: string): Promise<{
        vehicule: {
            type: import(".prisma/client").$Enums.TypeVehicule;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            statut: import(".prisma/client").$Enums.StatutVehicule;
            immatriculation: string;
            marque: string;
            modele: string;
            categorie: import(".prisma/client").$Enums.CategoryVehicule;
            tarifHoraire: number | null;
            tarifJournalier: number | null;
            maxPower: number | null;
            fuelConsumption: number | null;
            maxSpeed: number | null;
            acceleration: number | null;
            capacity: number | null;
            color: string | null;
            fuelType: import(".prisma/client").$Enums.FuelType | null;
            gearType: import(".prisma/client").$Enums.GearType | null;
            dateAcquisition: Date;
            kilometrage: number;
            photos: string[];
            dateControleTechnique: Date;
        };
        courses: ({
            client: {
                email: string;
                password: string | null;
                nom: string;
                prenom: string;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                telephone: string;
                statut: import(".prisma/client").$Enums.StatutClient;
                photoUrl: string | null;
                dateInscription: Date | null;
                nbCourses: number | null;
                resetCode: string | null;
                smsOtp: string | null;
                smsOtpExpiry: Date | null;
                phoneVerified: boolean | null;
                adresse: string | null;
                ville: string | null;
                preferences: string | null;
                profileUrl: string | null;
                verified: boolean | null;
                validationCode: string | null;
                resetCodeExpires: Date | null;
                stripeCustomerId: string | null;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            chauffeurId: number | null;
            startTime: Date | null;
            clientId: number | null;
            startLocation: string;
            endLocation: string;
            endTime: Date | null;
            estimatedDuration: string;
            currentLocation: string | null;
            estimatedPrice: number;
            finalPrice: number | null;
            paymentMethod: string;
            status: import(".prisma/client").$Enums.StatutCourse;
            typeService: import(".prisma/client").$Enums.TypeService;
            locationId: number | null;
            transportId: number | null;
        })[];
        documents: {
            type: import(".prisma/client").$Enums.TypeDocument;
            nom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            chauffeurId: number;
            status: string;
            fichier: string;
            mimeType: string;
            taille: number;
            dateExpiration: Date | null;
        }[];
        credits: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            solde: number;
            chauffeurId: number;
        };
        Transport: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            evaluation: number | null;
            chauffeurId: number | null;
            clientId: number;
            paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
            status: import(".prisma/client").$Enums.StatutTransport;
            departLatitude: number;
            departLongitude: number;
            destinationLatitude: number;
            destinationLongitude: number;
            dateReservation: Date;
            adresseDepart: string;
            adresseDestination: string;
            distanceEstimee: number;
            dureeEstimee: number;
            montantEstime: number;
            montantFinal: number | null;
            heureDepart: Date | null;
            heureArrivee: Date | null;
            dureeReelle: number | null;
            distanceReelle: number | null;
            tarifHoraireApplique: number | null;
            stripePaymentIntentId: string | null;
            commentaire: string | null;
            positionActuelle: import("@prisma/client/runtime/library").JsonValue | null;
            cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
            cashAmountReceived: number | null;
            cashConfirmedAt: Date | null;
            cashConfirmedBy: number | null;
            promoCodeId: number | null;
            montantReduction: number;
        }[];
    } & {
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutChauffeur;
        statutActivite: import(".prisma/client").$Enums.StatutActivite;
        vehiculeId: number | null;
        photoUrl: string | null;
        dateInscription: Date;
        evaluation: number;
        nbCourses: number;
        resetCode: string | null;
        resetCodeExpiry: Date | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
    }>;
    update(id: string, updateChauffeurDto: UpdateChauffeurDto): Promise<{
        vehicule: {
            type: import(".prisma/client").$Enums.TypeVehicule;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            statut: import(".prisma/client").$Enums.StatutVehicule;
            immatriculation: string;
            marque: string;
            modele: string;
            categorie: import(".prisma/client").$Enums.CategoryVehicule;
            tarifHoraire: number | null;
            tarifJournalier: number | null;
            maxPower: number | null;
            fuelConsumption: number | null;
            maxSpeed: number | null;
            acceleration: number | null;
            capacity: number | null;
            color: string | null;
            fuelType: import(".prisma/client").$Enums.FuelType | null;
            gearType: import(".prisma/client").$Enums.GearType | null;
            dateAcquisition: Date;
            kilometrage: number;
            photos: string[];
            dateControleTechnique: Date;
        };
        credits: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            solde: number;
            chauffeurId: number;
        };
    } & {
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutChauffeur;
        statutActivite: import(".prisma/client").$Enums.StatutActivite;
        vehiculeId: number | null;
        photoUrl: string | null;
        dateInscription: Date;
        evaluation: number;
        nbCourses: number;
        resetCode: string | null;
        resetCodeExpiry: Date | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
    }>;
    remove(id: string): Promise<{
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutChauffeur;
        statutActivite: import(".prisma/client").$Enums.StatutActivite;
        vehiculeId: number | null;
        photoUrl: string | null;
        dateInscription: Date;
        evaluation: number;
        nbCourses: number;
        resetCode: string | null;
        resetCodeExpiry: Date | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
    }>;
    rechargerCredit(id: string, rechargerCreditDto: RechargerCreditDto): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        solde: number;
        chauffeurId: number;
    }>;
    uploadPhoto(id: string, file: Express.Multer.File): Promise<{
        photoUrl: string;
    }>;
    getDocuments(id: string): Promise<{
        type: import(".prisma/client").$Enums.TypeDocument;
        nom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number;
        status: string;
        fichier: string;
        mimeType: string;
        taille: number;
        dateExpiration: Date | null;
    }[]>;
    addDocument(id: string, file: Express.Multer.File, createDocumentDto: CreateDocumentDto): Promise<{
        type: import(".prisma/client").$Enums.TypeDocument;
        nom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number;
        status: string;
        fichier: string;
        mimeType: string;
        taille: number;
        dateExpiration: Date | null;
    }>;
    getDocument(id: string, documentId: string, res: Response): Promise<void>;
    removeDocument(id: string, documentId: string): Promise<{
        type: import(".prisma/client").$Enums.TypeDocument;
        nom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number;
        status: string;
        fichier: string;
        mimeType: string;
        taille: number;
        dateExpiration: Date | null;
    }>;
    updateDocument(id: string, documentId: string, updateDocumentDto: Partial<CreateDocumentDto>): Promise<{
        type: import(".prisma/client").$Enums.TypeDocument;
        nom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number;
        status: string;
        fichier: string;
        mimeType: string;
        taille: number;
        dateExpiration: Date | null;
    }>;
    updateDocumentFile(id: string, documentId: string, file: Express.Multer.File, updateDocumentDto: Partial<CreateDocumentDto>): Promise<{
        type: import(".prisma/client").$Enums.TypeDocument;
        nom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number;
        status: string;
        fichier: string;
        mimeType: string;
        taille: number;
        dateExpiration: Date | null;
    }>;
    updateDocumentStatus(id: string, documentId: string, body: {
        status: string;
    }): Promise<{
        type: import(".prisma/client").$Enums.TypeDocument;
        nom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number;
        status: string;
        fichier: string;
        mimeType: string;
        taille: number;
        dateExpiration: Date | null;
    }>;
    getCourses(id: string, skip?: string, take?: string, status?: string, dateDebut?: string, dateFin?: string): Promise<({
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    })[]>;
    getIncidents(id: string, skip?: string, take?: string, status?: string): Promise<({
        course: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            chauffeurId: number | null;
            startTime: Date | null;
            clientId: number | null;
            startLocation: string;
            endLocation: string;
            endTime: Date | null;
            estimatedDuration: string;
            currentLocation: string | null;
            estimatedPrice: number;
            finalPrice: number | null;
            paymentMethod: string;
            status: import(".prisma/client").$Enums.StatutCourse;
            typeService: import(".prisma/client").$Enums.TypeService;
            locationId: number | null;
            transportId: number | null;
        };
    } & {
        type: import(".prisma/client").$Enums.TypeIncident;
        description: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number | null;
        chauffeurId: number | null;
        status: import(".prisma/client").$Enums.StatutIncident;
        date: Date;
        courseId: number | null;
    })[]>;
    getPerformance(id: string, periode?: string): Promise<{
        chauffeurId: number;
        periode: string;
        dateDebut: string;
        dateFin: string;
        nbCourses: number;
        revenuTotal: number;
        performanceData: {
            periode: string;
            courses: any;
            revenus: any;
        }[];
    }>;
    forgotPassword({ email }: ForgotPasswordDto): Promise<{
        message: string;
    }>;
    resetPassword(resetPasswordDto: ResetPasswordDto): Promise<{
        message: string;
    }>;
}

import { Response } from "express";
import { ClientsService } from "./clients.service";
import { CreateClientDto, CreateClientWithImageDto, ForgotPasswordDto, RegisterClientDto, ResetPasswordDto, SendEmailDto, SendSmsDto, CheckExistenceDto, RegisterClientBySmsDto, SendOtpClientDto, VerifyOtpClientDto, LoginClientBySmsDto, SendCustomSmsClientDto } from "./dto/create-client.dto";
import { UpdateClientDto } from "./dto/update-client.dto";
import { CreateFavoriteDestinationDto } from "./dto/create-favorite-destination.dto";
import { UpdateFavoriteDestinationDto } from "./dto/update-favorite-destination.dto";
export declare const clientStorage: {
    storage: import("multer").StorageEngine;
};
export declare class ClientsController {
    private readonly clientsService;
    constructor(clientsService: ClientsService);
    createWithPhoto(file: Express.Multer.File, createClientDto: CreateClientWithImageDto): Promise<{
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutClient;
        photoUrl: string | null;
        dateInscription: Date | null;
        nbCourses: number | null;
        resetCode: string | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
        adresse: string | null;
        ville: string | null;
        preferences: string | null;
        profileUrl: string | null;
        verified: boolean | null;
        validationCode: string | null;
        resetCodeExpires: Date | null;
        stripeCustomerId: string | null;
    }>;
    create(createClientDto: CreateClientDto): Promise<{
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutClient;
        photoUrl: string | null;
        dateInscription: Date | null;
        nbCourses: number | null;
        resetCode: string | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
        adresse: string | null;
        ville: string | null;
        preferences: string | null;
        profileUrl: string | null;
        verified: boolean | null;
        validationCode: string | null;
        resetCodeExpires: Date | null;
        stripeCustomerId: string | null;
    }>;
    message(data: SendEmailDto): Promise<void>;
    register(data: RegisterClientDto): Promise<{
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutClient;
        photoUrl: string | null;
        dateInscription: Date | null;
        nbCourses: number | null;
        resetCode: string | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
        adresse: string | null;
        ville: string | null;
        preferences: string | null;
        profileUrl: string | null;
        verified: boolean | null;
        validationCode: string | null;
        resetCodeExpires: Date | null;
        stripeCustomerId: string | null;
    }>;
    registerBySms(registerDto: RegisterClientBySmsDto): Promise<{
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutClient;
        photoUrl: string | null;
        dateInscription: Date | null;
        nbCourses: number | null;
        resetCode: string | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
        adresse: string | null;
        ville: string | null;
        preferences: string | null;
        profileUrl: string | null;
        verified: boolean | null;
        validationCode: string | null;
        resetCodeExpires: Date | null;
        stripeCustomerId: string | null;
    }>;
    sendOtpClient(sendOtpDto: SendOtpClientDto): Promise<{
        message: string;
        telephone: string;
    }>;
    verifyOtpClient(verifyOtpDto: VerifyOtpClientDto): Promise<{
        token: string;
        client: {
            email: string;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    }>;
    loginBySms(loginSmsDto: LoginClientBySmsDto): Promise<{
        token: string;
        client: {
            email: string;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    }>;
    resendOtpClient(sendOtpDto: SendOtpClientDto): Promise<{
        message: string;
        telephone: string;
    }>;
    sendCustomSmsClient(sendSmsDto: SendCustomSmsClientDto): Promise<{
        success: boolean;
        results: any[];
    }>;
    sms(data: SendSmsDto): Promise<void>;
    verifyEmail(email: string, otp: string): Promise<{
        token: string;
        client: {
            email: string;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    }>;
    login(email: string, password: string): Promise<{
        token: string;
        client: {
            _count: {
                Transport: number;
            };
            email: string;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    }>;
    forgotPassword(forgotPasswordDto: ForgotPasswordDto): Promise<{
        message: string;
    }>;
    resetPassword(resetPasswordDto: ResetPasswordDto): Promise<{
        message: string;
    }>;
    resendConfirmationEmail(email: string): Promise<{
        message: string;
    }>;
    checkExistence(checkExistenceDto: CheckExistenceDto): Promise<{
        exists: boolean;
        field: string;
        data: {
            email: string;
            id: number;
            telephone: string;
        };
    }>;
    getProfile(req: any): Promise<{
        _count: {
            Transport: number;
        };
        Transport: ({
            chauffeur: {
                email: string;
                password: string | null;
                nom: string;
                prenom: string;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                telephone: string;
                statut: import(".prisma/client").$Enums.StatutChauffeur;
                statutActivite: import(".prisma/client").$Enums.StatutActivite;
                vehiculeId: number | null;
                photoUrl: string | null;
                dateInscription: Date;
                evaluation: number;
                nbCourses: number;
                resetCode: string | null;
                resetCodeExpiry: Date | null;
                smsOtp: string | null;
                smsOtpExpiry: Date | null;
                phoneVerified: boolean | null;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            evaluation: number | null;
            chauffeurId: number | null;
            clientId: number;
            paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
            status: import(".prisma/client").$Enums.StatutTransport;
            departLatitude: number;
            departLongitude: number;
            destinationLatitude: number;
            destinationLongitude: number;
            dateReservation: Date;
            adresseDepart: string;
            adresseDestination: string;
            distanceEstimee: number;
            dureeEstimee: number;
            montantEstime: number;
            montantFinal: number | null;
            heureDepart: Date | null;
            heureArrivee: Date | null;
            dureeReelle: number | null;
            distanceReelle: number | null;
            tarifHoraireApplique: number | null;
            stripePaymentIntentId: string | null;
            commentaire: string | null;
            positionActuelle: import("@prisma/client/runtime/library").JsonValue | null;
            cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
            cashAmountReceived: number | null;
            cashConfirmedAt: Date | null;
            cashConfirmedBy: number | null;
            promoCodeId: number | null;
            montantReduction: number;
        })[];
        locations: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            clientId: number;
            status: import(".prisma/client").$Enums.StatutLocation;
            dateDebut: Date;
            dateFin: Date;
            stripeCustomerId: string | null;
            lieuDepart: string | null;
            lieuDestination: string | null;
            departLatitude: number | null;
            departLongitude: number | null;
            destinationLatitude: number | null;
            destinationLongitude: number | null;
            distance: number | null;
            montantTotal: number;
            stripePaymentId: string | null;
            stripeSessionId: string | null;
        }[];
    } & {
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutClient;
        photoUrl: string | null;
        dateInscription: Date | null;
        nbCourses: number | null;
        resetCode: string | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
        adresse: string | null;
        ville: string | null;
        preferences: string | null;
        profileUrl: string | null;
        verified: boolean | null;
        validationCode: string | null;
        resetCodeExpires: Date | null;
        stripeCustomerId: string | null;
    }>;
    findAll(skip?: string, take?: string, statut?: string, ville?: string, search?: string): Promise<{
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutClient;
        photoUrl: string | null;
        dateInscription: Date | null;
        nbCourses: number | null;
        resetCode: string | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
        adresse: string | null;
        ville: string | null;
        preferences: string | null;
        profileUrl: string | null;
        verified: boolean | null;
        validationCode: string | null;
        resetCodeExpires: Date | null;
        stripeCustomerId: string | null;
    }[]>;
    getClientPhoto(id: string, res: Response): Promise<void>;
    count(): Promise<number>;
    findOne(id: string): Promise<{
        _count: {
            Transport: number;
        };
        Transport: ({
            chauffeur: {
                email: string;
                password: string | null;
                nom: string;
                prenom: string;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                telephone: string;
                statut: import(".prisma/client").$Enums.StatutChauffeur;
                statutActivite: import(".prisma/client").$Enums.StatutActivite;
                vehiculeId: number | null;
                photoUrl: string | null;
                dateInscription: Date;
                evaluation: number;
                nbCourses: number;
                resetCode: string | null;
                resetCodeExpiry: Date | null;
                smsOtp: string | null;
                smsOtpExpiry: Date | null;
                phoneVerified: boolean | null;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            evaluation: number | null;
            chauffeurId: number | null;
            clientId: number;
            paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
            status: import(".prisma/client").$Enums.StatutTransport;
            departLatitude: number;
            departLongitude: number;
            destinationLatitude: number;
            destinationLongitude: number;
            dateReservation: Date;
            adresseDepart: string;
            adresseDestination: string;
            distanceEstimee: number;
            dureeEstimee: number;
            montantEstime: number;
            montantFinal: number | null;
            heureDepart: Date | null;
            heureArrivee: Date | null;
            dureeReelle: number | null;
            distanceReelle: number | null;
            tarifHoraireApplique: number | null;
            stripePaymentIntentId: string | null;
            commentaire: string | null;
            positionActuelle: import("@prisma/client/runtime/library").JsonValue | null;
            cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
            cashAmountReceived: number | null;
            cashConfirmedAt: Date | null;
            cashConfirmedBy: number | null;
            promoCodeId: number | null;
            montantReduction: number;
        })[];
        locations: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            clientId: number;
            status: import(".prisma/client").$Enums.StatutLocation;
            dateDebut: Date;
            dateFin: Date;
            stripeCustomerId: string | null;
            lieuDepart: string | null;
            lieuDestination: string | null;
            departLatitude: number | null;
            departLongitude: number | null;
            destinationLatitude: number | null;
            destinationLongitude: number | null;
            distance: number | null;
            montantTotal: number;
            stripePaymentId: string | null;
            stripeSessionId: string | null;
        }[];
    } & {
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutClient;
        photoUrl: string | null;
        dateInscription: Date | null;
        nbCourses: number | null;
        resetCode: string | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
        adresse: string | null;
        ville: string | null;
        preferences: string | null;
        profileUrl: string | null;
        verified: boolean | null;
        validationCode: string | null;
        resetCodeExpires: Date | null;
        stripeCustomerId: string | null;
    }>;
    update(id: string, updateClientDto: UpdateClientDto): Promise<{
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutClient;
        photoUrl: string | null;
        dateInscription: Date | null;
        nbCourses: number | null;
        resetCode: string | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
        adresse: string | null;
        ville: string | null;
        preferences: string | null;
        profileUrl: string | null;
        verified: boolean | null;
        validationCode: string | null;
        resetCodeExpires: Date | null;
        stripeCustomerId: string | null;
    }>;
    updateAvatar(id: string, file: Express.Multer.File): Promise<{
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutClient;
        photoUrl: string | null;
        dateInscription: Date | null;
        nbCourses: number | null;
        resetCode: string | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
        adresse: string | null;
        ville: string | null;
        preferences: string | null;
        profileUrl: string | null;
        verified: boolean | null;
        validationCode: string | null;
        resetCodeExpires: Date | null;
        stripeCustomerId: string | null;
    }>;
    remove(id: string): Promise<{
        email: string;
        password: string | null;
        nom: string;
        prenom: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        telephone: string;
        statut: import(".prisma/client").$Enums.StatutClient;
        photoUrl: string | null;
        dateInscription: Date | null;
        nbCourses: number | null;
        resetCode: string | null;
        smsOtp: string | null;
        smsOtpExpiry: Date | null;
        phoneVerified: boolean | null;
        adresse: string | null;
        ville: string | null;
        preferences: string | null;
        profileUrl: string | null;
        verified: boolean | null;
        validationCode: string | null;
        resetCodeExpires: Date | null;
        stripeCustomerId: string | null;
    }>;
    addFavoriteDestination(id: string, createFavoriteDto: CreateFavoriteDestinationDto): Promise<{
        description: string | null;
        title: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        clientId: number;
        address: string;
        latitude: number;
        longitude: number;
    }>;
    getFavoriteDestinations(id: string): Promise<{
        description: string | null;
        title: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        clientId: number;
        address: string;
        latitude: number;
        longitude: number;
    }[]>;
    updateFavoriteDestination(id: string, favoriteId: string, updateFavoriteDto: UpdateFavoriteDestinationDto): Promise<{
        description: string | null;
        title: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        clientId: number;
        address: string;
        latitude: number;
        longitude: number;
    }>;
    deleteFavoriteDestination(id: string, favoriteId: string): Promise<{
        description: string | null;
        title: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        clientId: number;
        address: string;
        latitude: number;
        longitude: number;
    }>;
}

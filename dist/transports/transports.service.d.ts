import { PrismaService } from "../prisma/prisma.service";
import { StripeService } from "../stripe/stripe.service";
import { NotificationsService } from "../notifications/notifications.service";
import { PromoCodesService } from "../promo-codes/promo-codes.service";
import { ConfigService } from "@nestjs/config";
import { CreateTransportDto, PaymentMethod } from "./dto/create-transport.dto";
import { StatutTransport, Prisma } from "@prisma/client";
import { TransportGateway } from "./transport.gateway";
import { PositionTrackingService } from "./position-tracking.service";
export declare class TransportsService {
    private prisma;
    private stripeService;
    private notificationsService;
    private promoCodesService;
    private configService;
    private transportGateway;
    private positionTrackingService;
    private googleMapsClient;
    constructor(prisma: PrismaService, stripeService: StripeService, notificationsService: NotificationsService, promoCodesService: PromoCodesService, configService: ConfigService, transportGateway: TransportGateway, positionTrackingService: PositionTrackingService);
    findAll(params: {
        skip?: number;
        take?: number;
        cursor?: Prisma.TransportWhereUniqueInput;
        where?: Prisma.TransportWhereInput;
        orderBy?: Prisma.TransportOrderByWithRelationInput;
    }): Promise<{
        items: ({
            chauffeur: {
                email: string;
                nom: string;
                prenom: string;
                id: number;
                telephone: string;
                photoUrl: string;
            };
            vehicule: {
                type: import(".prisma/client").$Enums.TypeVehicule;
                id: number;
                immatriculation: string;
                marque: string;
                modele: string;
                categorie: import(".prisma/client").$Enums.CategoryVehicule;
            };
            client: {
                email: string;
                nom: string;
                prenom: string;
                id: number;
                telephone: string;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            evaluation: number | null;
            chauffeurId: number | null;
            clientId: number;
            paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
            status: import(".prisma/client").$Enums.StatutTransport;
            departLatitude: number;
            departLongitude: number;
            destinationLatitude: number;
            destinationLongitude: number;
            dateReservation: Date;
            adresseDepart: string;
            adresseDestination: string;
            distanceEstimee: number;
            dureeEstimee: number;
            montantEstime: number;
            montantFinal: number | null;
            heureDepart: Date | null;
            heureArrivee: Date | null;
            dureeReelle: number | null;
            distanceReelle: number | null;
            tarifHoraireApplique: number | null;
            stripePaymentIntentId: string | null;
            commentaire: string | null;
            positionActuelle: Prisma.JsonValue | null;
            cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
            cashAmountReceived: number | null;
            cashConfirmedAt: Date | null;
            cashConfirmedBy: number | null;
            promoCodeId: number | null;
            montantReduction: number;
        })[];
        meta: {
            total: number;
            skip: number;
            take: number;
        };
    }>;
    findOne(id: number): Promise<{
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        vehicule: {
            type: import(".prisma/client").$Enums.TypeVehicule;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            statut: import(".prisma/client").$Enums.StatutVehicule;
            immatriculation: string;
            marque: string;
            modele: string;
            categorie: import(".prisma/client").$Enums.CategoryVehicule;
            tarifHoraire: number | null;
            tarifJournalier: number | null;
            maxPower: number | null;
            fuelConsumption: number | null;
            maxSpeed: number | null;
            acceleration: number | null;
            capacity: number | null;
            color: string | null;
            fuelType: import(".prisma/client").$Enums.FuelType | null;
            gearType: import(".prisma/client").$Enums.GearType | null;
            dateAcquisition: Date;
            kilometrage: number;
            photos: string[];
            dateControleTechnique: Date;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
        Message: ({
            chauffeur: {
                nom: string;
                prenom: string;
                id: number;
                photoUrl: string;
            };
            client: {
                nom: string;
                prenom: string;
                id: number;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            chauffeurId: number | null;
            clientId: number | null;
            transportId: number | null;
            courseId: number | null;
            lu: boolean;
            contenu: string;
            reservationId: number | null;
            expediteurType: import(".prisma/client").$Enums.TypeExpediteur;
        })[];
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number;
        evaluation: number | null;
        chauffeurId: number | null;
        clientId: number;
        paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
        status: import(".prisma/client").$Enums.StatutTransport;
        departLatitude: number;
        departLongitude: number;
        destinationLatitude: number;
        destinationLongitude: number;
        dateReservation: Date;
        adresseDepart: string;
        adresseDestination: string;
        distanceEstimee: number;
        dureeEstimee: number;
        montantEstime: number;
        montantFinal: number | null;
        heureDepart: Date | null;
        heureArrivee: Date | null;
        dureeReelle: number | null;
        distanceReelle: number | null;
        tarifHoraireApplique: number | null;
        stripePaymentIntentId: string | null;
        commentaire: string | null;
        positionActuelle: Prisma.JsonValue | null;
        cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
        cashAmountReceived: number | null;
        cashConfirmedAt: Date | null;
        cashConfirmedBy: number | null;
        promoCodeId: number | null;
        montantReduction: number;
    }>;
    create(createTransportDto: CreateTransportDto): Promise<{
        transport: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            evaluation: number | null;
            chauffeurId: number | null;
            clientId: number;
            paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
            status: import(".prisma/client").$Enums.StatutTransport;
            departLatitude: number;
            departLongitude: number;
            destinationLatitude: number;
            destinationLongitude: number;
            dateReservation: Date;
            adresseDepart: string;
            adresseDestination: string;
            distanceEstimee: number;
            dureeEstimee: number;
            montantEstime: number;
            montantFinal: number | null;
            heureDepart: Date | null;
            heureArrivee: Date | null;
            dureeReelle: number | null;
            distanceReelle: number | null;
            tarifHoraireApplique: number | null;
            stripePaymentIntentId: string | null;
            commentaire: string | null;
            positionActuelle: Prisma.JsonValue | null;
            cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
            cashAmountReceived: number | null;
            cashConfirmedAt: Date | null;
            cashConfirmedBy: number | null;
            promoCodeId: number | null;
            montantReduction: number;
            client: {
                email: string;
                password: string | null;
                nom: string;
                prenom: string;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                telephone: string;
                statut: import(".prisma/client").$Enums.StatutClient;
                photoUrl: string | null;
                dateInscription: Date | null;
                nbCourses: number | null;
                resetCode: string | null;
                smsOtp: string | null;
                smsOtpExpiry: Date | null;
                phoneVerified: boolean | null;
                adresse: string | null;
                ville: string | null;
                preferences: string | null;
                profileUrl: string | null;
                verified: boolean | null;
                validationCode: string | null;
                resetCodeExpires: Date | null;
                stripeCustomerId: string | null;
            };
            vehicule: {
                chauffeurs: {
                    email: string;
                    password: string | null;
                    nom: string;
                    prenom: string;
                    id: number;
                    createdAt: Date;
                    updatedAt: Date;
                    telephone: string;
                    statut: import(".prisma/client").$Enums.StatutChauffeur;
                    statutActivite: import(".prisma/client").$Enums.StatutActivite;
                    vehiculeId: number | null;
                    photoUrl: string | null;
                    dateInscription: Date;
                    evaluation: number;
                    nbCourses: number;
                    resetCode: string | null;
                    resetCodeExpiry: Date | null;
                    smsOtp: string | null;
                    smsOtpExpiry: Date | null;
                    phoneVerified: boolean | null;
                }[];
            } & {
                type: import(".prisma/client").$Enums.TypeVehicule;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                statut: import(".prisma/client").$Enums.StatutVehicule;
                immatriculation: string;
                marque: string;
                modele: string;
                categorie: import(".prisma/client").$Enums.CategoryVehicule;
                tarifHoraire: number | null;
                tarifJournalier: number | null;
                maxPower: number | null;
                fuelConsumption: number | null;
                maxSpeed: number | null;
                acceleration: number | null;
                capacity: number | null;
                color: string | null;
                fuelType: import(".prisma/client").$Enums.FuelType | null;
                gearType: import(".prisma/client").$Enums.GearType | null;
                dateAcquisition: Date;
                kilometrage: number;
                photos: string[];
                dateControleTechnique: Date;
            };
        };
        paymentMethod: PaymentMethod.STRIPE;
        setupUrl: string;
        sessionId: string;
        message?: undefined;
    } | {
        transport: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            evaluation: number | null;
            chauffeurId: number | null;
            clientId: number;
            paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
            status: import(".prisma/client").$Enums.StatutTransport;
            departLatitude: number;
            departLongitude: number;
            destinationLatitude: number;
            destinationLongitude: number;
            dateReservation: Date;
            adresseDepart: string;
            adresseDestination: string;
            distanceEstimee: number;
            dureeEstimee: number;
            montantEstime: number;
            montantFinal: number | null;
            heureDepart: Date | null;
            heureArrivee: Date | null;
            dureeReelle: number | null;
            distanceReelle: number | null;
            tarifHoraireApplique: number | null;
            stripePaymentIntentId: string | null;
            commentaire: string | null;
            positionActuelle: Prisma.JsonValue | null;
            cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
            cashAmountReceived: number | null;
            cashConfirmedAt: Date | null;
            cashConfirmedBy: number | null;
            promoCodeId: number | null;
            montantReduction: number;
        };
        paymentMethod: PaymentMethod.CASH;
        message: string;
        setupUrl?: undefined;
        sessionId?: undefined;
    }>;
    private calculerDistanceEtDuree;
    private calculerMontantEstime;
    private calculerMontantFinal;
    validatePromoCode(code: string, montantCourse: number): Promise<{
        valid: boolean;
        promoCode: {
            id: any;
            code: any;
            typeReduction: any;
            valeurReduction: any;
        };
        montantOriginal: number;
        montantReduction: number;
        montantFinal: number;
    }>;
    validerTransport(id: number, chauffeurId: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number;
        evaluation: number | null;
        chauffeurId: number | null;
        clientId: number;
        paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
        status: import(".prisma/client").$Enums.StatutTransport;
        departLatitude: number;
        departLongitude: number;
        destinationLatitude: number;
        destinationLongitude: number;
        dateReservation: Date;
        adresseDepart: string;
        adresseDestination: string;
        distanceEstimee: number;
        dureeEstimee: number;
        montantEstime: number;
        montantFinal: number | null;
        heureDepart: Date | null;
        heureArrivee: Date | null;
        dureeReelle: number | null;
        distanceReelle: number | null;
        tarifHoraireApplique: number | null;
        stripePaymentIntentId: string | null;
        commentaire: string | null;
        positionActuelle: Prisma.JsonValue | null;
        cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
        cashAmountReceived: number | null;
        cashConfirmedAt: Date | null;
        cashConfirmedBy: number | null;
        promoCodeId: number | null;
        montantReduction: number;
    }>;
    updatePosition(id: number, latitude: number, longitude: number, statusInfo?: string): Promise<{
        transport: {
            chauffeur: {
                email: string;
                password: string | null;
                nom: string;
                prenom: string;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                telephone: string;
                statut: import(".prisma/client").$Enums.StatutChauffeur;
                statutActivite: import(".prisma/client").$Enums.StatutActivite;
                vehiculeId: number | null;
                photoUrl: string | null;
                dateInscription: Date;
                evaluation: number;
                nbCourses: number;
                resetCode: string | null;
                resetCodeExpiry: Date | null;
                smsOtp: string | null;
                smsOtpExpiry: Date | null;
                phoneVerified: boolean | null;
            };
            client: {
                email: string;
                password: string | null;
                nom: string;
                prenom: string;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                telephone: string;
                statut: import(".prisma/client").$Enums.StatutClient;
                photoUrl: string | null;
                dateInscription: Date | null;
                nbCourses: number | null;
                resetCode: string | null;
                smsOtp: string | null;
                smsOtpExpiry: Date | null;
                phoneVerified: boolean | null;
                adresse: string | null;
                ville: string | null;
                preferences: string | null;
                profileUrl: string | null;
                verified: boolean | null;
                validationCode: string | null;
                resetCodeExpires: Date | null;
                stripeCustomerId: string | null;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            evaluation: number | null;
            chauffeurId: number | null;
            clientId: number;
            paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
            status: import(".prisma/client").$Enums.StatutTransport;
            departLatitude: number;
            departLongitude: number;
            destinationLatitude: number;
            destinationLongitude: number;
            dateReservation: Date;
            adresseDepart: string;
            adresseDestination: string;
            distanceEstimee: number;
            dureeEstimee: number;
            montantEstime: number;
            montantFinal: number | null;
            heureDepart: Date | null;
            heureArrivee: Date | null;
            dureeReelle: number | null;
            distanceReelle: number | null;
            tarifHoraireApplique: number | null;
            stripePaymentIntentId: string | null;
            commentaire: string | null;
            positionActuelle: Prisma.JsonValue | null;
            cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
            cashAmountReceived: number | null;
            cashConfirmedAt: Date | null;
            cashConfirmedBy: number | null;
            promoCodeId: number | null;
            montantReduction: number;
        };
        position: {
            lat: number;
            lng: number;
        };
        timestamp: Date;
        message: string;
    }>;
    updateStatus(id: number, newStatus: StatutTransport): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number;
        evaluation: number | null;
        chauffeurId: number | null;
        clientId: number;
        paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
        status: import(".prisma/client").$Enums.StatutTransport;
        departLatitude: number;
        departLongitude: number;
        destinationLatitude: number;
        destinationLongitude: number;
        dateReservation: Date;
        adresseDepart: string;
        adresseDestination: string;
        distanceEstimee: number;
        dureeEstimee: number;
        montantEstime: number;
        montantFinal: number | null;
        heureDepart: Date | null;
        heureArrivee: Date | null;
        dureeReelle: number | null;
        distanceReelle: number | null;
        tarifHoraireApplique: number | null;
        stripePaymentIntentId: string | null;
        commentaire: string | null;
        positionActuelle: Prisma.JsonValue | null;
        cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
        cashAmountReceived: number | null;
        cashConfirmedAt: Date | null;
        cashConfirmedBy: number | null;
        promoCodeId: number | null;
        montantReduction: number;
    }>;
    private validateStatusTransition;
    private handleTransportCompletion;
    private checkPaymentStatus;
    evaluerTransport(id: number, evaluation: number, commentaire?: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number;
        evaluation: number | null;
        chauffeurId: number | null;
        clientId: number;
        paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
        status: import(".prisma/client").$Enums.StatutTransport;
        departLatitude: number;
        departLongitude: number;
        destinationLatitude: number;
        destinationLongitude: number;
        dateReservation: Date;
        adresseDepart: string;
        adresseDestination: string;
        distanceEstimee: number;
        dureeEstimee: number;
        montantEstime: number;
        montantFinal: number | null;
        heureDepart: Date | null;
        heureArrivee: Date | null;
        dureeReelle: number | null;
        distanceReelle: number | null;
        tarifHoraireApplique: number | null;
        stripePaymentIntentId: string | null;
        commentaire: string | null;
        positionActuelle: Prisma.JsonValue | null;
        cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
        cashAmountReceived: number | null;
        cashConfirmedAt: Date | null;
        cashConfirmedBy: number | null;
        promoCodeId: number | null;
        montantReduction: number;
    }>;
    confirmPayment(id: number): Promise<{
        message: string;
        status: string;
    }>;
    finalizeTransportAfterPaymentSetup(transportId: number, sessionId: string): Promise<{
        transport: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            evaluation: number | null;
            chauffeurId: number | null;
            clientId: number;
            paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
            status: import(".prisma/client").$Enums.StatutTransport;
            departLatitude: number;
            departLongitude: number;
            destinationLatitude: number;
            destinationLongitude: number;
            dateReservation: Date;
            adresseDepart: string;
            adresseDestination: string;
            distanceEstimee: number;
            dureeEstimee: number;
            montantEstime: number;
            montantFinal: number | null;
            heureDepart: Date | null;
            heureArrivee: Date | null;
            dureeReelle: number | null;
            distanceReelle: number | null;
            tarifHoraireApplique: number | null;
            stripePaymentIntentId: string | null;
            commentaire: string | null;
            positionActuelle: Prisma.JsonValue | null;
            cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
            cashAmountReceived: number | null;
            cashConfirmedAt: Date | null;
            cashConfirmedBy: number | null;
            promoCodeId: number | null;
            montantReduction: number;
        };
        paymentStatus: import("stripe").Stripe.PaymentIntent.Status;
    }>;
    startTransport(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number;
        evaluation: number | null;
        chauffeurId: number | null;
        clientId: number;
        paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
        status: import(".prisma/client").$Enums.StatutTransport;
        departLatitude: number;
        departLongitude: number;
        destinationLatitude: number;
        destinationLongitude: number;
        dateReservation: Date;
        adresseDepart: string;
        adresseDestination: string;
        distanceEstimee: number;
        dureeEstimee: number;
        montantEstime: number;
        montantFinal: number | null;
        heureDepart: Date | null;
        heureArrivee: Date | null;
        dureeReelle: number | null;
        distanceReelle: number | null;
        tarifHoraireApplique: number | null;
        stripePaymentIntentId: string | null;
        commentaire: string | null;
        positionActuelle: Prisma.JsonValue | null;
        cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
        cashAmountReceived: number | null;
        cashConfirmedAt: Date | null;
        cashConfirmedBy: number | null;
        promoCodeId: number | null;
        montantReduction: number;
    }>;
    endTransport(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number;
        evaluation: number | null;
        chauffeurId: number | null;
        clientId: number;
        paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
        status: import(".prisma/client").$Enums.StatutTransport;
        departLatitude: number;
        departLongitude: number;
        destinationLatitude: number;
        destinationLongitude: number;
        dateReservation: Date;
        adresseDepart: string;
        adresseDestination: string;
        distanceEstimee: number;
        dureeEstimee: number;
        montantEstime: number;
        montantFinal: number | null;
        heureDepart: Date | null;
        heureArrivee: Date | null;
        dureeReelle: number | null;
        distanceReelle: number | null;
        tarifHoraireApplique: number | null;
        stripePaymentIntentId: string | null;
        commentaire: string | null;
        positionActuelle: Prisma.JsonValue | null;
        cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
        cashAmountReceived: number | null;
        cashConfirmedAt: Date | null;
        cashConfirmedBy: number | null;
        promoCodeId: number | null;
        montantReduction: number;
    }>;
    getCurrentPosition(id: number): Promise<{
        transportId: number;
        position: Prisma.JsonValue;
        status: import(".prisma/client").$Enums.StatutTransport;
        chauffeur: {
            nom: string;
            prenom: string;
            id: number;
        };
        lastUpdate: Date;
    }>;
    trackTransportRealTime(id: number, chauffeurId: number): Promise<{
        transportId: number;
        isTrackingEnabled: boolean;
        currentPosition: Prisma.JsonValue;
        status: import(".prisma/client").$Enums.StatutTransport;
        client: {
            nom: string;
            prenom: string;
        };
        websocketNamespace: string;
        message: string;
    }>;
    private calculateAndEmitETA;
    startAutomaticTracking(transportId: number): Promise<{
        message: string;
        transportId: number;
        interval: number;
        timestamp: Date;
    }>;
    stopAutomaticTracking(transportId: number): Promise<{
        message: string;
        transportId: number;
        timestamp: Date;
    }>;
    getPositionHistory(transportId: number, limit?: number): Promise<{
        transportId: number;
        positions: {
            position: string | number | true | Prisma.JsonObject | Prisma.JsonArray;
            timestamp: Date;
            status: import(".prisma/client").$Enums.StatutTransport;
        }[];
        message: string;
    }>;
    getTrackingStatistics(): Promise<{
        trackingStats: {
            activeTrackings: number;
            trackedTransports: number[];
            lastPositions: {
                [k: string]: {
                    lat: number;
                    lng: number;
                    timestamp: Date;
                };
            };
        };
        activeTransports: number;
        transportsDetails: {
            chauffeur: {
                nom: string;
                prenom: string;
                id: number;
            };
            client: {
                nom: string;
                prenom: string;
                id: number;
            };
            id: number;
            updatedAt: Date;
            status: import(".prisma/client").$Enums.StatutTransport;
            positionActuelle: Prisma.JsonValue;
        }[];
        timestamp: Date;
    }>;
    cleanup(): Promise<void>;
    createTransportMessage(transportId: number, contenu: string, expediteurType: "CLIENT" | "CHAUFFEUR", expediteurId: number): Promise<{
        chauffeur: {
            nom: string;
            prenom: string;
            id: number;
            photoUrl: string;
        };
        client: {
            nom: string;
            prenom: string;
            id: number;
            photoUrl: string;
        };
        transport: {
            id: number;
            status: import(".prisma/client").$Enums.StatutTransport;
            adresseDepart: string;
            adresseDestination: string;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        clientId: number | null;
        transportId: number | null;
        courseId: number | null;
        lu: boolean;
        contenu: string;
        reservationId: number | null;
        expediteurType: import(".prisma/client").$Enums.TypeExpediteur;
    }>;
    getTransportMessages(transportId: number, userId: number, userType: "CLIENT" | "CHAUFFEUR", skip?: number, take?: number): Promise<{
        messages: ({
            chauffeur: {
                nom: string;
                prenom: string;
                id: number;
                photoUrl: string;
            };
            client: {
                nom: string;
                prenom: string;
                id: number;
                photoUrl: string;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            chauffeurId: number | null;
            clientId: number | null;
            transportId: number | null;
            courseId: number | null;
            lu: boolean;
            contenu: string;
            reservationId: number | null;
            expediteurType: import(".prisma/client").$Enums.TypeExpediteur;
        })[];
        transport: {
            id: number;
            adresseDepart: string;
            adresseDestination: string;
            status: import(".prisma/client").$Enums.StatutTransport;
            client: {
                email: string;
                password: string | null;
                nom: string;
                prenom: string;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                telephone: string;
                statut: import(".prisma/client").$Enums.StatutClient;
                photoUrl: string | null;
                dateInscription: Date | null;
                nbCourses: number | null;
                resetCode: string | null;
                smsOtp: string | null;
                smsOtpExpiry: Date | null;
                phoneVerified: boolean | null;
                adresse: string | null;
                ville: string | null;
                preferences: string | null;
                profileUrl: string | null;
                verified: boolean | null;
                validationCode: string | null;
                resetCodeExpires: Date | null;
                stripeCustomerId: string | null;
            };
            chauffeur: {
                email: string;
                password: string | null;
                nom: string;
                prenom: string;
                id: number;
                createdAt: Date;
                updatedAt: Date;
                telephone: string;
                statut: import(".prisma/client").$Enums.StatutChauffeur;
                statutActivite: import(".prisma/client").$Enums.StatutActivite;
                vehiculeId: number | null;
                photoUrl: string | null;
                dateInscription: Date;
                evaluation: number;
                nbCourses: number;
                resetCode: string | null;
                resetCodeExpiry: Date | null;
                smsOtp: string | null;
                smsOtpExpiry: Date | null;
                phoneVerified: boolean | null;
            };
        };
        pagination: {
            skip: number;
            take: number;
            total: number;
        };
    }>;
    getTransportUnreadCount(transportId: number, userId: number, userType: "CLIENT" | "CHAUFFEUR"): Promise<{
        count: number;
        transportId: number;
    }>;
    markAllMessagesAsRead(transportId: number, userId: number, userType: "CLIENT" | "CHAUFFEUR"): Promise<{
        success: boolean;
        message: string;
    }>;
    getTotalUnreadMessagesCount(userId: number, userType: "CLIENT" | "CHAUFFEUR"): Promise<{
        count: number;
    }>;
    getTransportConversations(userId: number, userType: "CLIENT" | "CHAUFFEUR"): Promise<{
        id: number;
        adresseDepart: string;
        adresseDestination: string;
        status: import(".prisma/client").$Enums.StatutTransport;
        dateReservation: Date;
        client: {
            nom: string;
            prenom: string;
            id: number;
        };
        chauffeur: {
            nom: string;
            prenom: string;
            id: number;
        };
        lastMessage: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            lu: boolean;
            contenu: string;
            expediteurType: import(".prisma/client").$Enums.TypeExpediteur;
        };
        unreadCount: number;
        hasMessages: boolean;
        lastActivity: Date;
    }[]>;
    sendQuickMessage(transportId: number, expediteurType: "CLIENT" | "CHAUFFEUR", expediteurId: number, messageType: "ARRIVED" | "DELAYED" | "STARTED" | "FINISHED"): Promise<{
        chauffeur: {
            nom: string;
            prenom: string;
            id: number;
            photoUrl: string;
        };
        client: {
            nom: string;
            prenom: string;
            id: number;
            photoUrl: string;
        };
        transport: {
            id: number;
            status: import(".prisma/client").$Enums.StatutTransport;
            adresseDepart: string;
            adresseDestination: string;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        clientId: number | null;
        transportId: number | null;
        courseId: number | null;
        lu: boolean;
        contenu: string;
        reservationId: number | null;
        expediteurType: import(".prisma/client").$Enums.TypeExpediteur;
    }>;
    confirmCashPayment(transportId: number, chauffeurId: number, montantRecu: number): Promise<{
        transport: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            evaluation: number | null;
            chauffeurId: number | null;
            clientId: number;
            paymentMethod: import(".prisma/client").$Enums.PaymentMethod;
            status: import(".prisma/client").$Enums.StatutTransport;
            departLatitude: number;
            departLongitude: number;
            destinationLatitude: number;
            destinationLongitude: number;
            dateReservation: Date;
            adresseDepart: string;
            adresseDestination: string;
            distanceEstimee: number;
            dureeEstimee: number;
            montantEstime: number;
            montantFinal: number | null;
            heureDepart: Date | null;
            heureArrivee: Date | null;
            dureeReelle: number | null;
            distanceReelle: number | null;
            tarifHoraireApplique: number | null;
            stripePaymentIntentId: string | null;
            commentaire: string | null;
            positionActuelle: Prisma.JsonValue | null;
            cashPaymentStatus: import(".prisma/client").$Enums.CashPaymentStatus | null;
            cashAmountReceived: number | null;
            cashConfirmedAt: Date | null;
            cashConfirmedBy: number | null;
            promoCodeId: number | null;
            montantReduction: number;
        };
        paymentMethod: PaymentMethod;
        montantRecu: number;
        message: string;
    }>;
    private logger;
}

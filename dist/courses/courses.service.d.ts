import { PrismaService } from "../prisma/prisma.service";
import { CreateCourseDto } from "./dto/create-course.dto";
import { UpdateCourseDto } from "./dto/update-course.dto";
import { Prisma } from "@prisma/client";
import { NotificationsService } from "../notifications/notifications.service";
export declare class CoursesService {
    private prisma;
    private notificationsService;
    constructor(prisma: PrismaService, notificationsService: NotificationsService);
    create(createCourseDto: CreateCourseDto): Promise<{
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
    findAll(params: {
        skip?: number;
        take?: number;
        cursor?: Prisma.CourseWhereUniqueInput;
        where?: Prisma.CourseWhereInput;
        orderBy?: Prisma.CourseOrderByWithRelationInput;
    }): Promise<({
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    })[]>;
    findOne(id: number): Promise<{
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
        incidents: {
            type: import(".prisma/client").$Enums.TypeIncident;
            description: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number | null;
            chauffeurId: number | null;
            status: import(".prisma/client").$Enums.StatutIncident;
            date: Date;
            courseId: number | null;
        }[];
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
    update(id: number, updateCourseDto: UpdateCourseDto): Promise<{
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
    remove(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
    terminerCourse(id: number, finalPrice: number): Promise<{
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
    annulerCourse(id: number): Promise<{
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
    count(): Promise<number>;
    private getStatusLabel;
}

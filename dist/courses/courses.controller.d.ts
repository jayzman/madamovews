import { CoursesService } from "./courses.service";
import { CreateCourseDto } from "./dto/create-course.dto";
import { UpdateCourseDto } from "./dto/update-course.dto";
import { TerminerCourseDto } from "./dto/terminer-course.dto";
export declare class CoursesController {
    private readonly coursesService;
    constructor(coursesService: CoursesService);
    create(createCourseDto: CreateCourseDto): Promise<{
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
    findAll(skip?: string, take?: string, status?: string, chauffeurId?: string, clientId?: string, dateDebut?: string, dateFin?: string): Promise<({
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    })[]>;
    countCourses(): Promise<number>;
    findOne(id: string): Promise<{
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
        incidents: {
            type: import(".prisma/client").$Enums.TypeIncident;
            description: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number | null;
            chauffeurId: number | null;
            status: import(".prisma/client").$Enums.StatutIncident;
            date: Date;
            courseId: number | null;
        }[];
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
    update(id: string, updateCourseDto: UpdateCourseDto): Promise<{
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
    remove(id: string): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
    terminerCourse(id: string, terminerCourseDto: TerminerCourseDto): Promise<{
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
    annulerCourse(id: string): Promise<{
        chauffeur: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        chauffeurId: number | null;
        startTime: Date | null;
        clientId: number | null;
        startLocation: string;
        endLocation: string;
        endTime: Date | null;
        estimatedDuration: string;
        currentLocation: string | null;
        estimatedPrice: number;
        finalPrice: number | null;
        paymentMethod: string;
        status: import(".prisma/client").$Enums.StatutCourse;
        typeService: import(".prisma/client").$Enums.TypeService;
        locationId: number | null;
        transportId: number | null;
    }>;
}

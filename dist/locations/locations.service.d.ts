import { PrismaService } from "../prisma/prisma.service";
import { CreateLocationDto } from "./dto/create-location.dto";
import { StripeService } from "../stripe/stripe.service";
import { ConfigService } from "@nestjs/config";
import { NotificationsService } from "../notifications/notifications.service";
import { Prisma } from "@prisma/client";
export declare class LocationsService {
    private prisma;
    stripeService: StripeService;
    private configService;
    private notificationsService;
    constructor(prisma: PrismaService, stripeService: StripeService, configService: ConfigService, notificationsService: NotificationsService);
    create(createLocationDto: CreateLocationDto): Promise<{
        location: {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            clientId: number;
            status: import(".prisma/client").$Enums.StatutLocation;
            dateDebut: Date;
            dateFin: Date;
            stripeCustomerId: string | null;
            lieuDepart: string | null;
            lieuDestination: string | null;
            departLatitude: number | null;
            departLongitude: number | null;
            destinationLatitude: number | null;
            destinationLongitude: number | null;
            distance: number | null;
            montantTotal: number;
            stripePaymentId: string | null;
            stripeSessionId: string | null;
        };
        paymentUrl: string;
    }>;
    findAll(params: {
        skip?: number;
        take?: number;
        cursor?: Prisma.LocationVehiculeWhereUniqueInput;
        where?: Prisma.LocationVehiculeWhereInput;
        orderBy?: Prisma.LocationVehiculeOrderByWithRelationInput;
    }): Promise<{
        items: ({
            vehicule: {
                type: import(".prisma/client").$Enums.TypeVehicule;
                id: number;
                immatriculation: string;
                marque: string;
                modele: string;
                categorie: import(".prisma/client").$Enums.CategoryVehicule;
                photos: string[];
            };
            client: {
                email: string;
                nom: string;
                prenom: string;
                id: number;
                telephone: string;
            };
        } & {
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number;
            clientId: number;
            status: import(".prisma/client").$Enums.StatutLocation;
            dateDebut: Date;
            dateFin: Date;
            stripeCustomerId: string | null;
            lieuDepart: string | null;
            lieuDestination: string | null;
            departLatitude: number | null;
            departLongitude: number | null;
            destinationLatitude: number | null;
            destinationLongitude: number | null;
            distance: number | null;
            montantTotal: number;
            stripePaymentId: string | null;
            stripeSessionId: string | null;
        })[];
        meta: {
            total: number;
            skip: number;
            take: number;
        };
    }>;
    findOne(id: number): Promise<{
        vehicule: {
            type: import(".prisma/client").$Enums.TypeVehicule;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            statut: import(".prisma/client").$Enums.StatutVehicule;
            immatriculation: string;
            marque: string;
            modele: string;
            categorie: import(".prisma/client").$Enums.CategoryVehicule;
            tarifHoraire: number | null;
            tarifJournalier: number | null;
            maxPower: number | null;
            fuelConsumption: number | null;
            maxSpeed: number | null;
            acceleration: number | null;
            capacity: number | null;
            color: string | null;
            fuelType: import(".prisma/client").$Enums.FuelType | null;
            gearType: import(".prisma/client").$Enums.GearType | null;
            dateAcquisition: Date;
            kilometrage: number;
            photos: string[];
            dateControleTechnique: Date;
        };
        client: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutClient;
            photoUrl: string | null;
            dateInscription: Date | null;
            nbCourses: number | null;
            resetCode: string | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
            adresse: string | null;
            ville: string | null;
            preferences: string | null;
            profileUrl: string | null;
            verified: boolean | null;
            validationCode: string | null;
            resetCodeExpires: Date | null;
            stripeCustomerId: string | null;
        };
    } & {
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number;
        clientId: number;
        status: import(".prisma/client").$Enums.StatutLocation;
        dateDebut: Date;
        dateFin: Date;
        stripeCustomerId: string | null;
        lieuDepart: string | null;
        lieuDestination: string | null;
        departLatitude: number | null;
        departLongitude: number | null;
        destinationLatitude: number | null;
        destinationLongitude: number | null;
        distance: number | null;
        montantTotal: number;
        stripePaymentId: string | null;
        stripeSessionId: string | null;
    }>;
    confirmLocation(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number;
        clientId: number;
        status: import(".prisma/client").$Enums.StatutLocation;
        dateDebut: Date;
        dateFin: Date;
        stripeCustomerId: string | null;
        lieuDepart: string | null;
        lieuDestination: string | null;
        departLatitude: number | null;
        departLongitude: number | null;
        destinationLatitude: number | null;
        destinationLongitude: number | null;
        distance: number | null;
        montantTotal: number;
        stripePaymentId: string | null;
        stripeSessionId: string | null;
    }>;
    startLocation(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number;
        clientId: number;
        status: import(".prisma/client").$Enums.StatutLocation;
        dateDebut: Date;
        dateFin: Date;
        stripeCustomerId: string | null;
        lieuDepart: string | null;
        lieuDestination: string | null;
        departLatitude: number | null;
        departLongitude: number | null;
        destinationLatitude: number | null;
        destinationLongitude: number | null;
        distance: number | null;
        montantTotal: number;
        stripePaymentId: string | null;
        stripeSessionId: string | null;
    }>;
    endLocation(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number;
        clientId: number;
        status: import(".prisma/client").$Enums.StatutLocation;
        dateDebut: Date;
        dateFin: Date;
        stripeCustomerId: string | null;
        lieuDepart: string | null;
        lieuDestination: string | null;
        departLatitude: number | null;
        departLongitude: number | null;
        destinationLatitude: number | null;
        destinationLongitude: number | null;
        distance: number | null;
        montantTotal: number;
        stripePaymentId: string | null;
        stripeSessionId: string | null;
    }>;
    cancelLocation(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        vehiculeId: number;
        clientId: number;
        status: import(".prisma/client").$Enums.StatutLocation;
        dateDebut: Date;
        dateFin: Date;
        stripeCustomerId: string | null;
        lieuDepart: string | null;
        lieuDestination: string | null;
        departLatitude: number | null;
        departLongitude: number | null;
        destinationLatitude: number | null;
        destinationLongitude: number | null;
        distance: number | null;
        montantTotal: number;
        stripePaymentId: string | null;
        stripeSessionId: string | null;
    }>;
    handleStripeWebhook(event: any): Promise<{
        received: boolean;
    }>;
}

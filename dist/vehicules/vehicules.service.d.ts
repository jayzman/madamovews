import { PrismaService } from "../prisma/prisma.service";
import { CreateVehiculeDto } from "./dto/create-vehicule.dto";
import { UpdateVehiculeDto } from "./dto/update-vehicule.dto";
import { CreateMaintenanceDto } from "./dto/create-maintenance.dto";
import { CategoryVehicule, Prisma } from "@prisma/client";
export declare class VehiculesService {
    private prisma;
    constructor(prisma: PrismaService);
    private readonly uploadPath;
    create(createVehiculeDto: CreateVehiculeDto): Promise<{
        type: import(".prisma/client").$Enums.TypeVehicule;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        statut: import(".prisma/client").$Enums.StatutVehicule;
        immatriculation: string;
        marque: string;
        modele: string;
        categorie: import(".prisma/client").$Enums.CategoryVehicule;
        tarifHoraire: number | null;
        tarifJournalier: number | null;
        maxPower: number | null;
        fuelConsumption: number | null;
        maxSpeed: number | null;
        acceleration: number | null;
        capacity: number | null;
        color: string | null;
        fuelType: import(".prisma/client").$Enums.FuelType | null;
        gearType: import(".prisma/client").$Enums.GearType | null;
        dateAcquisition: Date;
        kilometrage: number;
        photos: string[];
        dateControleTechnique: Date;
    }>;
    findAll(params: {
        skip?: number;
        take?: number;
        cursor?: Prisma.VehiculeWhereUniqueInput;
        where?: Prisma.VehiculeWhereInput;
        orderBy?: Prisma.VehiculeOrderByWithRelationInput;
    }): Promise<({
        chauffeurs: {
            nom: string;
            prenom: string;
            id: number;
        }[];
    } & {
        type: import(".prisma/client").$Enums.TypeVehicule;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        statut: import(".prisma/client").$Enums.StatutVehicule;
        immatriculation: string;
        marque: string;
        modele: string;
        categorie: import(".prisma/client").$Enums.CategoryVehicule;
        tarifHoraire: number | null;
        tarifJournalier: number | null;
        maxPower: number | null;
        fuelConsumption: number | null;
        maxSpeed: number | null;
        acceleration: number | null;
        capacity: number | null;
        color: string | null;
        fuelType: import(".prisma/client").$Enums.FuelType | null;
        gearType: import(".prisma/client").$Enums.GearType | null;
        dateAcquisition: Date;
        kilometrage: number;
        photos: string[];
        dateControleTechnique: Date;
    })[]>;
    findByCategory(categorie: CategoryVehicule): Promise<({
        chauffeurs: {
            nom: string;
            prenom: string;
            id: number;
        }[];
    } & {
        type: import(".prisma/client").$Enums.TypeVehicule;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        statut: import(".prisma/client").$Enums.StatutVehicule;
        immatriculation: string;
        marque: string;
        modele: string;
        categorie: import(".prisma/client").$Enums.CategoryVehicule;
        tarifHoraire: number | null;
        tarifJournalier: number | null;
        maxPower: number | null;
        fuelConsumption: number | null;
        maxSpeed: number | null;
        acceleration: number | null;
        capacity: number | null;
        color: string | null;
        fuelType: import(".prisma/client").$Enums.FuelType | null;
        gearType: import(".prisma/client").$Enums.GearType | null;
        dateAcquisition: Date;
        kilometrage: number;
        photos: string[];
        dateControleTechnique: Date;
    })[]>;
    getByMarque(marque: string): Promise<({
        incidents: {
            type: import(".prisma/client").$Enums.TypeIncident;
            description: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number | null;
            chauffeurId: number | null;
            status: import(".prisma/client").$Enums.StatutIncident;
            date: Date;
            courseId: number | null;
        }[];
        chauffeurs: {
            nom: string;
            prenom: string;
            id: number;
        }[];
    } & {
        type: import(".prisma/client").$Enums.TypeVehicule;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        statut: import(".prisma/client").$Enums.StatutVehicule;
        immatriculation: string;
        marque: string;
        modele: string;
        categorie: import(".prisma/client").$Enums.CategoryVehicule;
        tarifHoraire: number | null;
        tarifJournalier: number | null;
        maxPower: number | null;
        fuelConsumption: number | null;
        maxSpeed: number | null;
        acceleration: number | null;
        capacity: number | null;
        color: string | null;
        fuelType: import(".prisma/client").$Enums.FuelType | null;
        gearType: import(".prisma/client").$Enums.GearType | null;
        dateAcquisition: Date;
        kilometrage: number;
        photos: string[];
        dateControleTechnique: Date;
    })[]>;
    getAvailableCategories(): Promise<import(".prisma/client").$Enums.CategoryVehicule[]>;
    findOne(id: number): Promise<{
        incidents: {
            type: import(".prisma/client").$Enums.TypeIncident;
            description: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            vehiculeId: number | null;
            chauffeurId: number | null;
            status: import(".prisma/client").$Enums.StatutIncident;
            date: Date;
            courseId: number | null;
        }[];
        chauffeurs: {
            email: string;
            password: string | null;
            nom: string;
            prenom: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            telephone: string;
            statut: import(".prisma/client").$Enums.StatutChauffeur;
            statutActivite: import(".prisma/client").$Enums.StatutActivite;
            vehiculeId: number | null;
            photoUrl: string | null;
            dateInscription: Date;
            evaluation: number;
            nbCourses: number;
            resetCode: string | null;
            resetCodeExpiry: Date | null;
            smsOtp: string | null;
            smsOtpExpiry: Date | null;
            phoneVerified: boolean | null;
        }[];
        maintenances: {
            type: string;
            description: string | null;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            statut: import(".prisma/client").$Enums.StatutMaintenance;
            vehiculeId: number;
            kilometrage: number;
            date: Date;
            cout: number;
        }[];
    } & {
        type: import(".prisma/client").$Enums.TypeVehicule;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        statut: import(".prisma/client").$Enums.StatutVehicule;
        immatriculation: string;
        marque: string;
        modele: string;
        categorie: import(".prisma/client").$Enums.CategoryVehicule;
        tarifHoraire: number | null;
        tarifJournalier: number | null;
        maxPower: number | null;
        fuelConsumption: number | null;
        maxSpeed: number | null;
        acceleration: number | null;
        capacity: number | null;
        color: string | null;
        fuelType: import(".prisma/client").$Enums.FuelType | null;
        gearType: import(".prisma/client").$Enums.GearType | null;
        dateAcquisition: Date;
        kilometrage: number;
        photos: string[];
        dateControleTechnique: Date;
    }>;
    update(id: number, updateVehiculeDto: UpdateVehiculeDto): Promise<{
        type: import(".prisma/client").$Enums.TypeVehicule;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        statut: import(".prisma/client").$Enums.StatutVehicule;
        immatriculation: string;
        marque: string;
        modele: string;
        categorie: import(".prisma/client").$Enums.CategoryVehicule;
        tarifHoraire: number | null;
        tarifJournalier: number | null;
        maxPower: number | null;
        fuelConsumption: number | null;
        maxSpeed: number | null;
        acceleration: number | null;
        capacity: number | null;
        color: string | null;
        fuelType: import(".prisma/client").$Enums.FuelType | null;
        gearType: import(".prisma/client").$Enums.GearType | null;
        dateAcquisition: Date;
        kilometrage: number;
        photos: string[];
        dateControleTechnique: Date;
    }>;
    remove(id: number): Promise<{
        type: import(".prisma/client").$Enums.TypeVehicule;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        statut: import(".prisma/client").$Enums.StatutVehicule;
        immatriculation: string;
        marque: string;
        modele: string;
        categorie: import(".prisma/client").$Enums.CategoryVehicule;
        tarifHoraire: number | null;
        tarifJournalier: number | null;
        maxPower: number | null;
        fuelConsumption: number | null;
        maxSpeed: number | null;
        acceleration: number | null;
        capacity: number | null;
        color: string | null;
        fuelType: import(".prisma/client").$Enums.FuelType | null;
        gearType: import(".prisma/client").$Enums.GearType | null;
        dateAcquisition: Date;
        kilometrage: number;
        photos: string[];
        dateControleTechnique: Date;
    }>;
    addMaintenance(id: number, createMaintenanceDto: CreateMaintenanceDto): Promise<{
        type: string;
        description: string | null;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        statut: import(".prisma/client").$Enums.StatutMaintenance;
        vehiculeId: number;
        kilometrage: number;
        date: Date;
        cout: number;
    }>;
    getMaintenances(id: number): Promise<{
        type: string;
        description: string | null;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        statut: import(".prisma/client").$Enums.StatutMaintenance;
        vehiculeId: number;
        kilometrage: number;
        date: Date;
        cout: number;
    }[]>;
    getAvailableVehicles(): Promise<({
        chauffeurs: {
            email: string;
            nom: string;
            prenom: string;
            id: number;
            telephone: string;
        }[];
    } & {
        type: import(".prisma/client").$Enums.TypeVehicule;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        statut: import(".prisma/client").$Enums.StatutVehicule;
        immatriculation: string;
        marque: string;
        modele: string;
        categorie: import(".prisma/client").$Enums.CategoryVehicule;
        tarifHoraire: number | null;
        tarifJournalier: number | null;
        maxPower: number | null;
        fuelConsumption: number | null;
        maxSpeed: number | null;
        acceleration: number | null;
        capacity: number | null;
        color: string | null;
        fuelType: import(".prisma/client").$Enums.FuelType | null;
        gearType: import(".prisma/client").$Enums.GearType | null;
        dateAcquisition: Date;
        kilometrage: number;
        photos: string[];
        dateControleTechnique: Date;
    })[]>;
    getAvailableVehicleTypes(): Promise<{
        type: import(".prisma/client").$Enums.TypeVehicule;
    }[]>;
    getMulterOptions(): {
        storage: import("multer").StorageEngine;
        fileFilter: (req: any, file: any, callback: any) => any;
    };
    getFileUrl(filename: string): string;
    getVehiclePhotos(id: number): Promise<string[]>;
    getVehiclePhoto(id: number, filename: string): Promise<string>;
}
